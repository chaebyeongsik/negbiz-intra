<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <template-config>
        <database>oracle</database>
        <comment>
            <file>
<![CDATA[
/*
 * Copyright (c) 2015 ZES Inc. All rights reserved.
 * This software is the confidential and proprietary information of ZES Inc.
 * You shall not disclose such Confidential Information and shall use it
 * only in accordance with the terms of the license agreement you entered into
 * with ZES Inc. (http://www.zesinc.co.kr/)
 */
]]>
            </file>
            <class>
<![CDATA[
/**
 * ${template.tableComment} 정보 ${template.classType} 클레스
 * 
 * 
 *         <pre>
 * << 개정이력(Modification Information) >>
 *    
 *     수정일       수정자   수정내용
 * --------------  --------  -------------------------------
 *  ${template.date}.    ${template.user}   최초작성
 * </pre>
 * @author (주)제스아이엔씨 기술연구소
 */
]]>
            </class>
        </comment>

        <file>
            <controller>
            ${template.unCapitalClassName}Vo.setFileList(UploadHelper.upload(request, "${template.unCapitalClassName}"));

            </controller>
            <declaration>
    // 첨부파일
    @Resource(name = "opFileService")
    private FileService opFileService;
            </declaration>
            <select>
        // 첨부파일
        if(Validate.isNotEmpty(dataVo.getFileSn())) {
            dataVo.setFileList(opFileService.selectFileList(dataVo.getFileSn()));
        }
            </select>
            <insert>
        if(Validate.isNotEmpty(${template.unCapitalClassName}Vo.getFileList())) {
            // 첨부파일
            Integer fileSn = opFileService.insertFileList(${template.unCapitalClassName}Vo.getFileList());
            ${template.unCapitalClassName}Vo.setFileSn(fileSn);
        }
            </insert>
            <update>
        if(Validate.isNotEmpty(${template.unCapitalClassName}Vo.getFileList())) {
            // 첨부파일
            ${template.className}VO dataVo = select${template.className}(${template.unCapitalClassName}Vo);
            Integer fileSn = opFileService.insertFileList(dataVo.getFileSn(), ${template.unCapitalClassName}Vo.getFileList());
            ${template.unCapitalClassName}Vo.setFileSn(fileSn);
        }
            </update>
            <delete>
        // 첨부파일 삭제
        if(Validate.isNotEmpty(dataVo.getFileSn())) {
            opFileService.deleteFile(dataVo.getFileSn());
        }
            </delete>
        </file>

        <java>
            <package>
package ${template.package};
            </package>
            <import>
import java.util.List;
import zesinc.web.vo.${template.classSuper};
            </import>

            <declaration>
                <start>
public class ${template.className} extends ${template.classSuper} {
                </start>
                <end>
}
                </end>
            </declaration>
        </java>
        <vo>
            <package>
package ${template.package}.domain;
            </package>
            <importFile>
import java.util.List;
import zesinc.component.file.domain.FileVO;
            </importFile>
            <import>
import java.util.Date;

import zesinc.web.vo.${template.classSuper};

import zesinc.web.validate.annotation.marker.Required;
import zesinc.web.validate.annotation.marker.Digits;
import zesinc.web.validate.annotation.marker.MaxLength;
            </import>
            <declaration>
                <start>
public class ${template.className}VO extends ${template.classSuper} {
                </start>
                <end>
}
                </end>
            </declaration>
            <member>
                <serialVersion>
    /** serialVersionUID */
    private static final long serialVersionUID = ${template.serialVersion};
                </serialVersion>
                <field>
    /** ${template.columnComment} */${template.annotation}
    private ${template.columnType} ${template.columnName};
                </field>
                <list>
    /** ${template.columnComment} 목록 */
    private List&lt;${template.columnType}&gt; ${template.columnName}List;
                </list>
                <file>
<![CDATA[
    /** 첨부파일 목록 */
    private List<FileVO> fileList;
]]>
                </file>
            </member>
            <method>
                <field>
                    <set>
    /**
     * ${template.columnComment} 설정
     * 
     * @param ${template.columnName}을(를) ${template.columnType} ${template.columnName}로 설정
     */
    public void set${template.capColumnName}(${template.columnType} ${template.columnName}) {
        this.${template.columnName} = ${template.columnName};
    }
                    </set>
                    <get>
    /**
     * ${template.columnComment} 반환
     * 
     * @return ${template.columnType} ${template.columnName}
     */
    public ${template.columnType} get${template.capColumnName}() {
        return ${template.columnName};
    }
                    </get>
                </field>
                <list>
                    <set>
    /**
     * ${template.columnComment} 목록 설정
     * 
     * @param ${template.columnName} 목록을 List&lt;${template.columnType}&gt; ${template.columnName}List으로 설정
     */
    public void set${template.capColumnName}List(List&lt;${template.columnType}&gt; ${template.columnName}List) {
        this.${template.columnName}List = ${template.columnName}List;
    }
                    </set>
                    <get>
    /**
     * ${template.columnComment} 목록 반환
     * 
     * @return List&lt;${template.columnType}&gt; ${template.columnName} 목록
     */
    public List&lt;${template.columnType}&gt; get${template.capColumnName}List() {
        return ${template.columnName}List;
    }
                    </get>
                </list>
                <file>
                    <set>
<![CDATA[
    /**
     * 파일목록을 설정
     * 
     * @param 파일목록을 List&lt;FileVO&gt; fileList로 설정
     */
    public void setFileList(List<FileVO> fileList) {
        this.fileList = fileList;
    }
]]>
                    </set>
                    <get>
<![CDATA[
    /**
     * 파일 목록을 반환
     * 
     * @return List&lt;FileVO&gt; fileList
     */
    public List<FileVO> getFileList() {
        return fileList;
    }
]]>
                    </get>
                </file>
            </method>
        </vo>

        <dao>
            <import>
import java.util.List;
import zesinc.web.vo.TreeVO;
import org.egovframe.rte.psl.dataaccess.mapper.Mapper;
            </import>
            <importDomain>
import ${template.package}.domain.${template.voName}VO;
            </importDomain>
            <declaration>
                <start>
@Mapper("op${template.className}Dao")
public interface ${template.className}Mapper {
                </start>
                <end>
}
                </end>
            </declaration>

            <select>
    /**
     * ${template.tableComment} 상세 조회
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    ${template.className}VO select${template.className}(${template.className}VO ${template.unCapitalClassName}Vo);
            </select>

            <selectTreeList>
    /**
     * ${template.tableComment} 트리 목록 조회
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    List&lt;TreeVO&gt; select${template.className}TreeList(${template.className}VO ${template.unCapitalClassName}Vo);
            </selectTreeList>

            <selectList>
    /**
     * ${template.tableComment} 목록 조회
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    List&lt;${template.className}VO&gt; select${template.className}List(${template.className}VO ${template.unCapitalClassName}Vo);
            </selectList>

            <selectListCount>
    /**
     * ${template.tableComment} 목록 건수
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Integer select${template.className}ListCount(${template.className}VO ${template.unCapitalClassName}Vo);
            </selectListCount>

            <joinSelect>
    /**
     * ${template.joinTableComment} 상세 조회
     * 
     * @param ${template.unCapJoinClassName}Vo
     * @return
     */
    ${template.joinClassName}VO select${template.joinClassName}(${template.joinClassName}VO ${template.unCapJoinClassName}Vo);
            </joinSelect>

            <joinSelectList>
    /**
     * ${template.joinTableComment} 목록 조회
     * 
     * @param ${template.unCapJoinClassName}Vo
     * @return
     */
    List&lt;${template.joinClassName}VO&gt; select${template.joinClassName}List(${template.joinClassName}VO ${template.unCapJoinClassName}Vo);
            </joinSelectList>

            <joinSelectListCount>
    /**
     * ${template.joinTableComment} 목록 건수
     * 
     * @param ${template.unCapJoinClassName}Vo
     * @return
     */
    Integer select${template.joinClassName}ListCount(${template.joinClassName}VO ${template.unCapJoinClassName}Vo);
            </joinSelectListCount>

            <insert>
    /**
     * ${template.tableComment} 등록
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Integer insert${template.className}(${template.className}VO ${template.unCapitalClassName}Vo);
            </insert>

            <update>
    /**
     * ${template.tableComment} 수정
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Integer update${template.className}(${template.className}VO ${template.unCapitalClassName}Vo);
            </update>

            <updateSortOrder>
    /**
     * ${template.tableComment} 정렬순서 수정
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Integer update${template.className}SortOrder(${template.className}VO ${template.unCapitalClassName}Vo);
            </updateSortOrder>

            <delete>
    /**
     * ${template.tableComment} 삭제
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Integer delete${template.className}(${template.className}VO ${template.unCapitalClassName}Vo);
            </delete>
        </dao>


        <service>
            <import>
import java.util.List;
import zesinc.web.support.pager.Pager;
import zesinc.web.vo.TreeVO;
            </import>
            <importDomain>
import ${template.package}.domain.${template.voName}VO;
            </importDomain>
            <declaration>
                <start>
public interface ${template.className}Service {
                </start>
                <end>
}
                </end>
            </declaration>

            <select>
    /**
     * ${template.tableComment} 상세 조회
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    ${template.className}VO select${template.className}(${template.className}VO ${template.unCapitalClassName}Vo);
            </select>

            <selectTreeList>
    /**
     * ${template.tableComment} 트리 목록 조회
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    List&lt;TreeVO&gt; select${template.className}TreeList(${template.className}VO ${template.unCapitalClassName}Vo);
            </selectTreeList>

            <selectList>
    /**
     * ${template.tableComment} 목록 조회
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    List&lt;${template.className}VO&gt; select${template.className}List(${template.className}VO ${template.unCapitalClassName}Vo);
            </selectList>

            <selectPagerList>
    /**
     * ${template.tableComment} 목록 조회
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Pager&lt;${template.className}VO&gt; select${template.className}PageList(${template.className}VO ${template.unCapitalClassName}Vo);
            </selectPagerList>

            <joinSelect>
    /**
     * ${template.joinTableComment} 상세 조회
     * 
     * @param ${template.unCapJoinClassName}Vo
     * @return
     */
    ${template.joinClassName}VO select${template.joinClassName}(${template.joinClassName}VO ${template.unCapJoinClassName}Vo);
            </joinSelect>

            <joinSelectList>
    /**
     * ${template.joinTableComment} 목록 조회
     * 
     * @param ${template.unCapJoinClassName}Vo
     * @return
     */
    List&lt;${template.joinClassName}VO&gt; select${template.joinClassName}List(${template.joinClassName}VO ${template.unCapJoinClassName}Vo);
            </joinSelectList>

            <joinSelectPagerList>
    /**
     * ${template.joinTableComment} 페이징 목록 조회
     * 
     * @param ${template.unCapJoinClassName}Vo
     * @return
     */
    Pager&lt;${template.joinClassName}VO&gt; select${template.joinClassName}PageList(${template.joinClassName}VO ${template.unCapJoinClassName}Vo);
            </joinSelectPagerList>

            <insert>
    /**
     * ${template.tableComment} 등록
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Integer insert${template.className}(${template.className}VO ${template.unCapitalClassName}Vo);
            </insert>

            <update>
    /**
     * ${template.tableComment} 수정
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Integer update${template.className}(${template.className}VO ${template.unCapitalClassName}Vo);
            </update>

            <updateSortOrder>
    /**
     * ${template.tableComment} 정렬순서 수정
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Boolean update${template.className}SortOrder(${template.className}VO ${template.unCapitalClassName}Vo);
            </updateSortOrder>

            <delete>
    /**
     * ${template.tableComment} 삭제
     * 
     * @param ${template.unCapitalClassName}Vo
     * @return
     */
    Integer delete${template.className}(${template.className}VO ${template.unCapitalClassName}Vo) throws Exception;
            </delete>
        </service>

        <serviceImpl>
            <package>
package ${template.package}.impl;
            </package>
            <import>
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import zesinc.component.file.FileService;
import zesinc.core.lang.Validate;

import ${template.package}.${template.className}Mapper;
import ${template.package}.${template.className}Service;
import zesinc.web.support.pager.Pager;
import zesinc.web.vo.TreeVO;
import org.egovframe.rte.fdl.cmmn.EgovAbstractServiceImpl;
            </import>
            <importDomain>
import ${template.package}.domain.${template.voName}VO;
            </importDomain>
            <declaration>
                <start>
@Service("op${template.className}Service")
public class ${template.className}ServiceImpl extends EgovAbstractServiceImpl implements ${template.className}Service {

    @Resource(name = "op${template.className}Dao")
    private ${template.className}Mapper op${template.className}Dao;
${template.file.declaration}
                </start>
                <end>
}
                </end>
            </declaration>

            <select>
    @Override
    public ${template.className}VO select${template.className}(${template.className}VO ${template.unCapitalClassName}Vo) {

        ${template.className}VO dataVo = op${template.daoClassName}Dao.select${template.className}(${template.unCapitalClassName}Vo);
${template.file.select}

        return dataVo;
    }
            </select>

            <selectTreeList>
    @Override
    public List&lt;TreeVO&gt; select${template.className}TreeList(${template.className}VO ${template.unCapitalClassName}Vo) {

        List&lt;TreeVO&gt; dataList = op${template.daoClassName}Dao.select${template.className}TreeList(${template.unCapitalClassName}Vo);

        return dataList;
    }
            </selectTreeList>

            <selectList>
    @Override
    public List&lt;${template.className}VO&gt; select${template.className}List(${template.className}VO ${template.unCapitalClassName}Vo) {

        List&lt;${template.className}VO&gt; dataList = op${template.daoClassName}Dao.select${template.className}List(${template.unCapitalClassName}Vo);

        return dataList;
    }
            </selectList>

            <selectPagerList>
    @Override
    public Pager&lt;${template.className}VO&gt; select${template.className}PageList(${template.className}VO ${template.unCapitalClassName}Vo) {

        List&lt;${template.className}VO&gt; dataList = op${template.daoClassName}Dao.select${template.className}List(${template.unCapitalClassName}Vo);
        Integer totalNum = op${template.daoClassName}Dao.select${template.className}ListCount(${template.unCapitalClassName}Vo);

        return new Pager&lt;${template.className}VO&gt;(dataList, ${template.unCapitalClassName}Vo, totalNum);
    }
            </selectPagerList>

            <joinSelect>
    @Override
    public ${template.joinClassName}VO select${template.joinClassName}(${template.joinClassName}VO ${template.unCapJoinClassName}Vo) {

        ${template.joinClassName}VO dataVo = op${template.daoClassName}Dao.select${template.joinClassName}(${template.unCapJoinClassName}Vo);
${template.file.select}

        return dataVo;
    }
            </joinSelect>

            <joinSelectList>
    @Override
    public List&lt;${template.joinClassName}VO&gt; select${template.joinClassName}List(${template.joinClassName}VO ${template.unCapJoinClassName}Vo) {

        List&lt;${template.joinClassName}VO&gt; dataList = op${template.daoClassName}Dao.select${template.joinClassName}List(${template.unCapJoinClassName}Vo);

        return dataList;
    }
            </joinSelectList>

            <joinSelectPagerList>
    @Override
    public Pager&lt;${template.joinClassName}VO&gt; select${template.joinClassName}PageList(${template.joinClassName}VO ${template.unCapJoinClassName}Vo) {

        List&lt;${template.joinClassName}VO&gt; dataList = op${template.daoClassName}Dao.select${template.joinClassName}List(${template.unCapJoinClassName}Vo);
        Integer totalNum = op${template.daoClassName}Dao.select${template.joinClassName}ListCount(${template.unCapJoinClassName}Vo);

        return new Pager&lt;${template.joinClassName}VO&gt;(dataList, ${template.unCapJoinClassName}Vo, totalNum);
    }
            </joinSelectPagerList>

            <insert>
    @Override
    public Integer insert${template.className}(${template.className}VO ${template.unCapitalClassName}Vo) {

${template.file.insert}

        return op${template.daoClassName}Dao.insert${template.className}(${template.unCapitalClassName}Vo);
    }
            </insert>

            <update>
    @Override
    public Integer update${template.className}(${template.className}VO ${template.unCapitalClassName}Vo) {

${template.file.update}

        return op${template.daoClassName}Dao.update${template.className}(${template.unCapitalClassName}Vo);
    }
            </update>

            <updateSortOrder>
    @Override
    public Boolean update${template.className}SortOrder(${template.className}VO ${template.unCapitalClassName}Vo) {

        if(Validate.isEmpty(${template.unCapitalClassName}Vo.getParamMap())) {
            return Boolean.FALSE;
        }
 
        String ${template.upperPkNm} =${template.unCapitalClassName}Vo.getString("q_${template.upperPkNm}");
        String ${template.pkNm} = ${template.unCapitalClassName}Vo.getString("q_${template.pkNm}");
        Integer sortSn = ${template.unCapitalClassName}Vo.getInteger("q_sortSn");

        if(Validate.isEmpty(${template.upperPkNm}) || Validate.isEmpty(${template.pkNm}) || Validate.isEmpty(sortSn)) {
            return Boolean.FALSE;
        }

        ${template.unCapitalClassName}Vo.setSortSn(sortSn);

        op${template.daoClassName}Dao.update${template.className}SortOrder(${template.unCapitalClassName}Vo);

        return Boolean.TRUE;
    }
            </updateSortOrder>

            <delete>
    @Override
    public Integer delete${template.className}(${template.className}VO ${template.unCapitalClassName}Vo) throws Exception {

        // 원본 삭제
        ${template.className}VO dataVo = select${template.className}(${template.unCapitalClassName}Vo);
        dataVo.setParamMap(${template.unCapitalClassName}Vo.getParamMap());

        Integer delCnt = op${template.daoClassName}Dao.delete${template.className}(dataVo);

        if(delCnt > 1) {
            throw new Exception("삭제 건수가 일치하지 않습니다.");
        }

${template.file.delete}

        return delCnt;
    }
            </delete>
        </serviceImpl>

        <controller>
            <import>
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import zesinc.component.file.support.UploadHelper;
import zesinc.core.lang.Validate;
import zesinc.login.domain.LoginVO;
import zesinc.web.vo.TreeVO;
import zesinc.web.auth.AuthType;
import zesinc.web.auth.anotation.OpenworksAuth;
import zesinc.web.spring.controller.IntraController;
import zesinc.web.support.BaseConfig;
import zesinc.web.support.helper.OpHelper;
import zesinc.web.utils.MessageUtil;
import zesinc.web.validate.ValidateResultHolder;
import zesinc.web.validate.ValidateUtil;
            </import>
            <importDomain>
import ${template.package}.domain.${template.voName}VO;
            </importDomain>
            <declaration>
                <start>
@Controller("${template.tableComment} 관리")
@RequestMapping(value = { "${template.requestMapping}" })
public class ${template.className}Controller extends IntraController {

    @Resource(name = "op${template.className}Service")
    private ${template.className}Service op${template.className}Service;
                </start>
                <end>
}
                </end>
            </declaration>

            <select>
    /**
     * ${template.tableComment} 상세
     */
    @OpenworksAuth(authType = AuthType.READ)
    @RequestMapping(value = "${template.uriPrefix}_select${template.className}.do")
    public void select${template.className}(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

        model.addAttribute(BaseConfig.KEY_DATA_VO, op${template.serviceClassName}Service.select${template.className}(${template.unCapitalClassName}Vo));
    }
            </select>

            <selectTreeMain>
    /**
     * ${template.tableComment} 메인화면
     */
    @OpenworksAuth(authType = AuthType.READ)
    @RequestMapping(value = "BD_select${template.className}List.do")
    public void select${template.className}BDList(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

    }
            </selectTreeMain>

            <selectTreeAdd>
    /**
     * ${template.tableComment} 관리화면
     */
    @OpenworksAuth(authType = AuthType.READ)
    @RequestMapping(value = "PD_select${template.className}List.do")
    public void select${template.className}PDList(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

    }
            </selectTreeAdd>

            <selectTreeList>
    /**
     * ${template.tableComment} 트리 목록
     */
    @OpenworksAuth(authType = AuthType.READ)
    @RequestMapping(value = "ND_select${template.className}TreeList.do")
    public String select${template.className}TreeList(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

        return responseJson(model, op${template.serviceClassName}Service.select${template.className}TreeList(${template.unCapitalClassName}Vo));
    }
            </selectTreeList>

            <selectList>
    /**
     * ${template.tableComment} 목록
     */
    @OpenworksAuth(authType = AuthType.READ)
    @RequestMapping(value = "${template.uriPrefix}_select${template.className}List.do")
    public void select${template.className}List(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

        model.addAttribute(BaseConfig.KEY_DATA_LIST, op${template.serviceClassName}Service.select${template.className}List(${template.unCapitalClassName}Vo));
    }
            </selectList>

            <selectPagerList>
    /**
     * ${template.tableComment} 페이지 목록
     */
    @OpenworksAuth(authType = AuthType.READ)
    @RequestMapping(value = "${template.uriPrefix}_select${template.className}List.do")
    public void select${template.className}List(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

        model.addAttribute(BaseConfig.KEY_PAGER, op${template.serviceClassName}Service.select${template.className}PageList(${template.unCapitalClassName}Vo));
    }
            </selectPagerList>


            <joinSelect>
    /**
     * ${template.joinTableComment} 상세
     */
    @OpenworksAuth(authType = AuthType.READ)
    @RequestMapping(value = "${template.uriPrefix}_select${template.joinClassName}.do")
    public void select${template.joinClassName}(HttpServletRequest request, Model model, ${template.joinClassName}VO ${template.unCapJoinClassName}Vo) {

        model.addAttribute(BaseConfig.KEY_DATA_VO, op${template.serviceClassName}Service.select${template.joinClassName}(${template.unCapJoinClassName}Vo));
    }
            </joinSelect>

            <joinSelectList>
    /**
     * ${template.joinTableComment} 목록
     */
    @OpenworksAuth(authType = AuthType.READ)
    @RequestMapping(value = "${template.uriPrefix}_select${template.joinClassName}List.do")
    public void select${template.joinClassName}List(HttpServletRequest request, Model model, ${template.joinClassName}VO ${template.unCapJoinClassName}Vo) {

        model.addAttribute(BaseConfig.KEY_DATA_LIST, op${template.serviceClassName}Service.select${template.joinClassName}List(${template.unCapJoinClassName}Vo));
    }
            </joinSelectList>

            <joinSelectPagerList>
    /**
     * ${template.joinTableComment} 페이지 목록
     */
    @OpenworksAuth(authType = AuthType.READ)
    @RequestMapping(value = "${template.uriPrefix}_select${template.joinClassName}List.do")
    public void select${template.joinClassName}List(HttpServletRequest request, Model model, ${template.joinClassName}VO ${template.unCapJoinClassName}Vo) {

        model.addAttribute(BaseConfig.KEY_PAGER, op${template.serviceClassName}Service.select${template.joinClassName}PageList(${template.unCapJoinClassName}Vo));
    }
            </joinSelectPagerList>

            <insertForm>
    /**
     * ${template.tableComment} 입력 폼
     */
    @OpenworksAuth(authType = AuthType.MANAGER)
    @RequestMapping(value = { "${template.uriPrefix}_insert${template.className}Form.do" })
    public void insert${template.className}Form(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

        ValidateResultHolder holder = ValidateUtil.validate(${template.unCapitalClassName}Vo);
        model.addAttribute(BaseConfig.KEY_VALIDATE, holder);
    }
            </insertForm>

            <insertSetCharger>
            LoginVO loginVo = (LoginVO) getMgrSession();
            ${template.unCapitalClassName}Vo.setRgtrId(loginVo.getPicId());
            ${template.unCapitalClassName}Vo.setRgtrNm(loginVo.getPicNm());
            ${template.unCapitalClassName}Vo.setIpAddr(getIpAddr());
            </insertSetCharger>

            <insert>
    /**
     * ${template.tableComment} 등록
     */
    @OpenworksAuth(authType = AuthType.MANAGER)
    @RequestMapping(value = "ND_insert${template.className}.do", method = RequestMethod.POST)
    public String insert${template.className}(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

        // 검증
        ValidateResultHolder holder = ValidateUtil.validate(${template.unCapitalClassName}Vo);
        if(holder.isValid()) {
${template.controller.insertSetCharger} ${template.file.controller}
            Integer key = op${template.serviceClassName}Service.insert${template.className}(${template.unCapitalClassName}Vo);
            if(key != 1) {
                return alertAndBack(model, MessageUtil.getMessage("common.processFail"));
            }
        } else {
            return alertAndBack(model, MessageUtil.getMessage("common.validateFail"));
        }

        String url = "BD_select${template.className}List.do?" + OpHelper.getSearchQueryString(request);
        return alertAndRedirect(model, MessageUtil.getMessage("common.insertOk"), url);
    }
            </insert>

            <insertTree>
    /**
     * ${template.tableComment} 등록
     */
    @OpenworksAuth(authType = AuthType.MANAGER)
    @RequestMapping(value = "ND_insert${template.className}.do", method = RequestMethod.POST)
    public String insert${template.className}(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {
        Integer key = 0;
        // 검증
        ValidateResultHolder holder = ValidateUtil.validate(${template.unCapitalClassName}Vo);
        if(holder.isValid()) {
${template.controller.insertSetCharger} ${template.file.controller}
            // 등록 실행
            key = op${template.serviceClassName}Service.insert${template.className}(${template.unCapitalClassName}Vo);
            if(key != 1) {
                return responseJson(model, Boolean.FALSE, key, MessageUtil.getMessage("common.processFail"));
            }
        } else {
            return responseJson(model, Boolean.FALSE, MessageUtil.getMessage("common.validateFail"));
        }

        return responseJson(model, Boolean.TRUE, key, MessageUtil.getMessage("common.insertOk"));
    }
            </insertTree>

            <updateForm>
    /**
     * ${template.tableComment} 수정 폼
     */
    @OpenworksAuth(authType = AuthType.MANAGER)
    @RequestMapping(value = { "${template.uriPrefix}_update${template.className}Form.do" })
    public void update${template.className}Form(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

        ValidateResultHolder holder = ValidateUtil.validate(${template.unCapitalClassName}Vo);
        model.addAttribute(BaseConfig.KEY_VALIDATE, holder);

        model.addAttribute(BaseConfig.KEY_DATA_VO, op${template.serviceClassName}Service.select${template.className}(${template.unCapitalClassName}Vo));
    }
            </updateForm>

            <updateSetCharger>
            LoginVO loginVo = (LoginVO) getMgrSession();
            ${template.unCapitalClassName}Vo.setMdfrId(loginVo.getPicId());
            ${template.unCapitalClassName}Vo.setUpdusrNm(loginVo.getPicNm());
            ${template.unCapitalClassName}Vo.setIpAddr(getIpAddr());
            </updateSetCharger>

            <update>
    /**
     * ${template.tableComment} 수정
     */
    @OpenworksAuth(authType = AuthType.MANAGER)
    @RequestMapping(value = "ND_update${template.className}.do", method = RequestMethod.POST)
    public String update${template.className}(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {
        // 검증
        ValidateResultHolder holder = ValidateUtil.validate(${template.unCapitalClassName}Vo);
        if(holder.isValid()) {
${template.controller.updateSetCharger} ${template.file.controller}
            // 수정 실행
            Integer key = op${template.serviceClassName}Service.update${template.className}(${template.unCapitalClassName}Vo);
            if(key != 1) {
                return alertAndBack(model, MessageUtil.getMessage("common.processFail"));
            }
        } else {
            return alertAndBack(model, MessageUtil.getMessage("common.validateFail"));
        }

        String url = "BD_select${template.className}.do?" + OpHelper.getSearchQueryString(request);
        return alertAndRedirect(model, MessageUtil.getMessage("common.updateOk"), url);
    }
            </update>

            <updateTree>
    /**
     * ${template.tableComment} 수정
     */
    @OpenworksAuth(authType = AuthType.MANAGER)
    @RequestMapping(value = "ND_update${template.className}.do", method = RequestMethod.POST)
    public String update${template.className}(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {
        Integer key = 0;
        // 검증
        ValidateResultHolder holder = ValidateUtil.validate(${template.unCapitalClassName}Vo);
        if(holder.isValid()) {
${template.controller.updateSetCharger} ${template.file.controller}
            key = op${template.serviceClassName}Service.update${template.className}(${template.unCapitalClassName}Vo);
            if(key != 1) {
                return responseJson(model, Boolean.FALSE, key, MessageUtil.getMessage("common.processFail"));
            }
        } else {
            return responseJson(model, Boolean.FALSE, MessageUtil.getMessage("common.validateFail"));
        }

        return responseJson(model, Boolean.TRUE, key, MessageUtil.getMessage("common.updateOk"));
    }
            </updateTree>

            <updateSortOrder>
    /**
     * ${template.tableComment} 정렬순서 수정
     */
    @OpenworksAuth(authType = AuthType.MANAGER)
    @RequestMapping(value = "ND_update${template.className}SortOrder.do")
    public String update${template.className}SortOrder(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) {

${template.controller.updateSetCharger}

        Boolean success = op${template.serviceClassName}Service.update${template.className}SortOrder(${template.unCapitalClassName}Vo);

        if(!success) {
            return responseJson(model, Boolean.FALSE, MessageUtil.getMessage("common.processFail"));
        }

        return responseJson(model, Boolean.TRUE, MessageUtil.getMessage("common.updateOk"));
    }
            </updateSortOrder>

            <delete>
    /**
     * ${template.tableComment} 삭제
     */
    @OpenworksAuth(authType = AuthType.MANAGER)
    @RequestMapping(value = "ND_delete${template.className}.do", method = RequestMethod.POST)
    public String delete${template.className}(HttpServletRequest request, Model model, ${template.className}VO ${template.unCapitalClassName}Vo) throws Exception {

        /*
        LoginVO loginVo = (LoginVO) getMgrSession();
        ${template.className}VO dataVo = op${template.serviceClassName}Service.select${template.className}(${template.unCapitalClassName}Vo);
        if(dataVo.getRgtrId().equals(loginVo.getPicId())) {
        */
            Integer cnt = op${template.serviceClassName}Service.delete${template.className}(${template.unCapitalClassName}Vo);
            if(cnt != 1) {
                return alertAndBack(model, MessageUtil.getMessage("common.processFail"));
            }
        /*
        } else {
            return alertAndBack(model, MessageUtil.getMessage("common.notAllow"));
        }
        */
        String url = "BD_select${template.className}List.do?" + OpHelper.getSearchQueryString(request);
        return alertAndRedirect(model, MessageUtil.getMessage("common.deleteOk"), url);
    }
            </delete>
        </controller>
        <sql>
            <declaration>
                <start>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${template.package}.${template.className}Mapper">
]]>
                </start>
                <end>
<![CDATA[
</mapper>
]]>
                </end>
            </declaration>
        </sql>

        <jsp>
            <const>
                <validate>
<![CDATA[
<op:jsTag type="intra" items="opvalidate" />
]]>
                </validate>
                <validScript>
<![CDATA[
            /* 유효성 검증 BEAN Annotation 기반 자동 설정 */
            <valid:script type="msgbox" />
            $("#dataForm").submit(function() {
                return validate();
            });
]]>
                </validScript>
                <customScript>
<![CDATA[
        /* 사용자 정의 추가 검증(필요한 검증 코드 삽입) 기본 검증후 메소드가 자동 호출된다. */
        var customValidate = function() {
            return true;
        };
]]>
                </customScript>
            </const>
            <declaration>
                <start>
<![CDATA[
<%@ page contentType="text/html;charset=UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>

<%@ taglib uri="http://www.openworks.kr/jsp/jstl" prefix="op"%>
<%@ taglib uri="http://www.openworks.kr/jsp/validate" prefix="valid"%>

<!DOCTYPE html>
<html lang="ko">
<head>
    <title>${template.tableComment} 관리</title>

    <op:jsTag type="intra" items="opform" />
    ${tempalte.validate}

    <!-- 기능별 스크립트 삽입 부 -->
    <!--
    <script type="text/javascript" src="/resources/intra/${template.unCapitalClassName}/js/${template.unCapitalClassName}.js"></script>
    -->

    <script type="text/javascript">
        //&lt;![CDATA[

        /* 공통 초기화 기능 */
        $(document).ready(function() {
            ${template.validScript}
        });

        ${template.customScript}

        //]]&gt;
    </script>
</head>
<body>
]]>
                </start>
                <end>
<![CDATA[
</body>
</html>
]]>
                </end>
            </declaration>

            <viewForm>
<![CDATA[
            <form name="dataForm" id="dataForm" method="post" action="BD_select${template.className}List.do">
                <!-- 페이징 관련 파라미터 생성. rowPerPage 설정 시 목록표시 갯수 선택 생성됨-->
                <op:pagerParam view="view" ignores="" />
            </form>
]]>
            </viewForm>

            <listForm>
<![CDATA[
            <div class="block text-center">
                <form name="dataForm" id="dataForm" method="get" action="BD_select${template.className}List.do" class="form-inline">
                    <fieldset>
                        <legend class="sr-only">목록검색조건</legend>
                        <div class="block">
                            <div class="form-group">
                                <label for="q_searchKey" class="control-label">항목</label>
                                <select name="q_searchKey" id="q_searchKey" class="select" style="width:120px;">
                                    <option value="">-- 검색선택 --</option>
                                    <option value="1001">제목</option>
                                    <option value="1002">내용</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="q_searchVal" class="control-label">검색어</label>
                                <input type="text" name="q_searchVal" id="q_searchVal" value="${paramMap.q_searchVal}" class="form-control"/>
                            </div>
                            <div class="form-group">
                                <label for="q_startDt" class="control-label">시작일</label> <input type="text" class="from-date form-control" name="q_startDt" id="q_startDt" />
                            </div>
                            <div class="form-group">
                                <label for="q_endDt" class="control-label">종료일</label> <input type="text" class="to-date form-control" name="q_endDt" id="q_endDt" />
                            </div>
                            <button type="submit" class="btn btn-info">검색</button>
                            <button type="button" class="btn btn-info" onclick="opSearchReset();">초기화</button>
                        </div>
                        <%-- 페이징 관련 파라미터 생성. 목록표시 갯수 선택 자동생성--%>
                        <op:pagerParam title="${template.tableComment} 목록" ignores="" />
                     </fieldset>
                </form>
            </div>
]]>
            </listForm>

            <buttonForm>
<![CDATA[
    <!-- 버튼 -->
    <div class="row">
        <div class="col-xs-12 btn-group">
            <div class="pull-right">
                <button type="submit" class="btn btn-success">저장</button>
                <button type="reset" class="btn btn-default">재작성</button>

                <button type="submit" class="btn btn-success" onclick="opInsertForm('BD_insert${template.className}Form.do');">등록</button>
                <button type="button" class="btn btn-success" onclick="opUpdateForm('BD_update${template.className}Form.do');">수정</button>
                <button type="button" class="btn btn-danger" onclick="opDelete('ND_delete${template.className}.do');">삭제</button>
                <button type="button" class="btn btn-primary" onclick="opList('BD_select${template.className}List.do');">목록</button>
            </div>
        </div>
    </div>
    <!-- //버튼 -->
]]>
            </buttonForm>

            <paggingForm>
<![CDATA[
    <!-- 페이징 -->
    <op:pager pager="${pager}" />
    <!-- //페이징 -->
]]>
            </paggingForm>

            <view>
                <tblStart>
<![CDATA[
    <!-- 내용보기 -->
    <div class="block table-responsive">
        <table class="table table-bordered" summary="${template.tableComment} 정보입니다.">
            <caption class="hidden">${template.tableComment} 상세보기</caption>
            <colgroup>
                <col width="15%" />
                <col />
            </colgroup>
]]>
                </tblStart>
                <tblEnd>
<![CDATA[
        </table>
    </div>
]]>
                </tblEnd>
                <tbStart>
<![CDATA[
            <tbody>
]]>
                </tbStart>
                <tbCenter>
<![CDATA[
                <tr>
                    <th>${template.columnComment}</th>
                    <td>${dataVo.${template.unCapColumnName}}</td>
                </tr>
]]>
                </tbCenter>

                <tbCenterDate>
<![CDATA[
                <tr>
                    <th>${template.columnComment}</th>
                    <td><fmt:formatDate value="${dataVo.${template.unCapColumnName}}" pattern="yyyy-MM-dd HH:mm:ss" /></td>
                </tr>
]]>
                </tbCenterDate>

                <tbCenterFile>
<![CDATA[
                <tr>
                    <th>첨부파일</th>
                    <td><op:fileDownload fileList="${dataVo.fileList}"/></td>
                </tr>
]]>
                </tbCenterFile>
                <tbEnd>
<![CDATA[
            </tbody>
]]>
                </tbEnd>
            </view>

            <form>
                <header>
<![CDATA[
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h6 class="panel-title">
                <i class="icon-libreoffice"></i> ${template.tableComment} 등록
            </h6>
        </div>
        <div class="panel-body">
]]>
                </header>
                <formStart>
<![CDATA[
    <form name="dataForm" id="dataForm" method="post" ${template.enctype} action="ND_${template.actionType}${template.className}.do" class="form-horizontal">
        <%-- 페이징 관련 파라미터 생성 --%>
        <op:pagerParam view="view" ignores="" />

]]>
                </formStart>
                <panelStart>
<![CDATA[
        <div class="help-block text-right">
            <span class="mandatory">*</span> 항목은 필수 입력항목입니다.
        </div>

        <div class="panel panel-default">
            <div class="panel-body">
]]>
                </panelStart>
                <formCenterInput>
<![CDATA[
                <div class="form-group">
                    <label for="${template.unCapColumnName}" class="control-label col-xs-2">${template.mandatory} ${template.columnComment}</label>
                    <div class="col-xs-10">
                        <div class="row">
                            <div class="col-xs-6">
                                <input type="text" name="${template.unCapColumnName}" id="${template.unCapColumnName}" value="${dataVo.${template.unCapColumnName}}" maxlength="${template.dataLength}" class="form-control" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12">
                                <valid:msg name="${template.unCapColumnName}" />
                            </div>
                        </div>
                    </div>
                </div>
]]>
                </formCenterInput>

                <formCenterTextarea>
<![CDATA[
                <div class="form-group">
                    <label for="${template.unCapColumnName}" class="control-label col-xs-2">${template.mandatory} ${template.columnComment}</label>
                    <div class="col-xs-10">
                        <div class="row">
                            <div class="col-xs-12">
                                <textarea name="${template.unCapColumnName}" id="${template.unCapColumnName}" rows="5" cols="80" class="form-control">${dataVo.${template.unCapColumnName}}</textarea>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12">
                                <valid:msg name="${template.unCapColumnName}" />
                            </div>
                        </div>
                    </div>
                </div>
]]>
                </formCenterTextarea>

                <formCenterRadio>
<![CDATA[
                <div class="form-group">
                    <label for="${template.unCapColumnName}Y" class="control-label col-xs-2">${template.mandatory} ${template.columnComment}</label>
                    <div class="col-xs-10">
                        <label for="${template.unCapColumnName}Y" class="radio-inline radio-primary">
                            <input type="radio" name="${template.unCapColumnName}" id="${template.unCapColumnName}Y" value="Y" <c:if test="${dataVo.${template.unCapColumnName} eq 'Y'}">checked="checked"</c:if> class="styled" />
                            예
                        </label>
                        <label for="${template.unCapColumnName}N" class="radio-inline radio-primary">
                            <input type="radio" name="${template.unCapColumnName}" id="${template.unCapColumnName}N" value="N" <c:if test="${dataVo.${template.unCapColumnName} eq 'N'}">checked="checked"</c:if> class="styled" />
                            아니오
                        </label>
                        <div class="row">
                            <div class="col-xs-12">
                                <valid:msg name="${template.unCapColumnName}" />
                            </div>
                        </div>
                    </div>
                </div>
]]>
                </formCenterRadio>

                <formCenterFile>
<![CDATA[
                <div class="form-group">
                    <label for="${template.unCapColumnName}" class="control-label col-xs-2">${template.mandatory} ${template.columnComment}</label>
                    <div class="col-xs-10">
                        <op:fileUpload name="${template.unCapColumnName}" fileList="${dataVo.fileList}" />
                    </div>
                </div>
]]>
                </formCenterFile>

                <formCenterDate>
<![CDATA[   
                <div class="form-group">
                    <label for="${template.unCapColumnName}" class="control-label col-xs-2">${template.columnComment}</label>
                    <div class="col-xs-2">
                        <input type="text" class="datepicker form-control" name="${template.unCapColumnName}" id="${template.unCapColumnName}" value="${dataVo.${template.unCapColumnName}}" />
                    </div>
                </div>
]]>
                </formCenterDate>

                <formSample>
<![CDATA[
                <div class="form-group">
                    <label for="siteSn" class="control-label col-xs-2"> 텍스트셈플 </label>
                    <div class="col-xs-10">
                        <p class="form-control-static">텍스트</p>
                        <div class="row">
                            <div class="col-xs-8">
                                <div class="help-block op-validate">
                                    <ul class="list-group">
                                        <li class="list-group-item"><span class="validate-msg">별도로 문구를 작성하는 경우 참조</span></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="checkboxY" class="control-label col-xs-2">체크박스예제</label>
                    <div class="col-xs-10">
                        <label for="checkboxY" class="checkbox-inline checkbox-primary">
                            <input type="checkbox" name="checkbox" id="checkboxY" value="Y" class="styled" />
                            서울
                        </label>
                        <label for="checkboxY" class="checkbox-inline checkbox-primary">
                            <input type="checkbox" name="checkbox" id="checkboxY" value="Y" class="styled" />
                            경기
                        </label>
                        <div class="row">
                            <div class="col-xs-12">
                                소스상의 name 수정 필요
                                <valid:msg name="ntcPstYn" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="radioY" class="control-label col-xs-2">라디오버튼예제</label>
                    <div class="col-xs-10">
                        <label for="radioY" class="radio-inline radio-primary">
                            <input type="radio" name="radio" id="radioY" value="Y" class="styled" />
                            공개
                        </label>
                        <label for="radioN"  class="radio-inline radio-primary">
                            <input type="radio" name="radio" id="radioN" value="N" class="styled" />
                            비공개
                        </label>
                        <div class="row">
                            <div class="col-xs-12">
                                소스상의 name 수정 필요
                                <valid:msg name="rlsYn" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="select" class="control-label col-xs-2">Select 예제</label>
                    <div class="col-xs-10">
                        <select name="select" id="select" class="select" style="width:250px;">
                            <option value="">조건선택</option>
                            <option value="1001">제목</option>
                            <option value="1002">내용</option>
                        </select>
                        <div class="row">
                            <div class="col-xs-12">
                                소스상의 name 수정 필요
                                <valid:msg name="rlsYn" />
                            </div>
                        </div>
                    </div>
                </div>
]]>
                </formSample>
                <panelEnd>
<![CDATA[

            </div>
        </div>
]]>
                </panelEnd>
                <formEnd>
<![CDATA[
    </form>
]]>
                </formEnd>
                <footer>
<![CDATA[

            </div>
        </div>
]]>
                </footer>
            </form>

            <list>
                <listStart>
<![CDATA[
    <div class="block table-responsive">
        <!-- 리스트 -->
        <table class="table table-bordered table-striped table-hover op-table-list" summary="${template.joinTableComment} 목록으로 순번,${template.allColumnComment} 정보를 제공합니다.">
            <caption class="hidden">${template.joinTableComment} 목록</caption>
]]>
                </listStart>
                <listEnd>
<![CDATA[
        </table>
        <!-- //리스트 -->
    </div>
]]>
                </listEnd>
                <colGroupStart>
<![CDATA[
            <colgroup>
                <col width="" />
]]>
                </colGroupStart>
                <colGroupCenter>
<![CDATA[
                <col width="" />
]]>
                </colGroupCenter>
                <colGroupEnd>
<![CDATA[
            </colgroup>
]]>
                </colGroupEnd>

                <thStart>
<![CDATA[
            <thead>
                <tr>
                    <th>순번</th>
]]>
                </thStart>
                <thCenter>
<![CDATA[
                    <th>${template.columnComment}</th>
]]>
                </thCenter>
                <thEnd>
<![CDATA[
                </tr>
            </thead>
]]>
                </thEnd>

                <tbCenter>
<![CDATA[
                        <td><a href="${template.aHref}">${dataVo.${template.unCapColumnName}}</a></td>
]]>
                </tbCenter>

                <tbCenterDate>
<![CDATA[
                        <td><fmt:formatDate value="${dataVo.${template.unCapColumnName}}" pattern="yyyy-MM-dd" /></td>
]]>
                </tbCenterDate>

                <tbStart>
<![CDATA[
            <tbody>
                <c:forEach items="${dataList}" var="dataVo" varStatus="status">
                    <tr>
                        <td class="text-center">${status.index}</td>
]]>
                </tbStart>

                <tbEnd>
<![CDATA[
                    </tr>
                </c:forEach>
            </tbody>
]]>
                </tbEnd>

                <tbPageStart>
<![CDATA[
            <tbody>
                <c:set var="index" value="${pager.indexNo}" />
                <c:forEach items="${pager.list}" var="dataVo" varStatus="status">
                    <tr>
                        <td class="text-center">${index-status.index}</td>
]]>
                </tbPageStart>

                <tbPageEnd>
<![CDATA[
                    </tr>
                </c:forEach>
                <op:no-data obj="${pager}" colspan="${template.allColumnCnt}" />
            </tbody>
]]>
                </tbPageEnd>
            </list>

            <treeMain>
                <declaration>
                    <start>
<![CDATA[
<%@ page contentType="text/html;charset=UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://www.openworks.kr/jsp/jstl" prefix="op"%>

<!DOCTYPE html>
<html lang="ko">
<head>
<title>${template.tableComment} 관리</title>

<op:jsTag type="intra" items="tree, opform" />

<script type="text/javascript">
    //&lt;![CDATA[

    var contPadId = "${template.className}_VIEW";
    var Optree;
    // 예제 옵션 위의 주석을 참조하여 필요한 설정을 하도록 한다. 
    var options = {
        // ROOT 노드 클릭시 상세화면 표시여부
        USE_ROOT_VIEW : false,
        // 폴더인 경우 view를 열지 여부 (기본값 true)
        FOLDER_OPEN : true,
        // view가 로드될 패널
        CONT_PAN_ID : contPadId,
        // 트리 데이터 url
        SRC_URL : "ND_select${template.className}TreeList.do",
        // view url
        VIEW_URL : "INC_update${template.className}Form.do",
        //VIEW_URL : "INC_select${template.className}.do",
        //VIEW_URL : "INC_select${template.className}.do",
        // node move시 호출될 url
        MOVE_URL : "ND_update${template.className}SortOrder.do",
        // 기본 표시 명칭
        ROOT_NODE_NM : "${template.tableComment}목록",
        // 기본 표시 데이터 키값 (highCommonCd : dummy, highTreeCd : 0)
        ROOT_NODE_VAL : OpConfig.defaultCode.highTreeCd,
        // 추가 파라미터가 필요한 경우에 사용자 정의 추가
        // 부모 노드의 파라미터 명칭
        P_NODE_NM : "q_${template.upperPkNm}",
        // 현재 노드의 파라미터 명칭
        NODE_NM : "q_${template.pkNm}",
        // 이동시 현재 일련번호 값을 전달할 파라미터 키명칭
        ORDER_NM : "q_sortSn"
    };
    /* 공통 초기화 기능 */
    $(document).ready(function() {
        // 위의 defaults 옵션으로 생성하는 경우
        Optree = $("#TreePan").optree(options);

        // 초기 상세화면 영역 안내 메시지 표시
        initView(contPadId);

        // ${template.tableComment} 등록/수정폼 오픈 
        $("#addModal").opmodal({
            width : 930
        });
    });

    /**
     * 상세화면 초기화
     */
    var initView = function(id) {
        $("#" + id).html($("#dummy").html());
    };

    <%-- 
    /** 이하 셈플 개발 완료시 삭제 요망  */
    /** 이하 셈플 개발 완료시 삭제 요망  */
    /** 이하 셈플 개발 완료시 삭제 요망  */

    // 기본 옵션 설정값 설명 및 셈플
    var defaults = {
        // table 레이아웃 사용여부
        USE_TABLE : false,
        // Drag and drop 사용여부
        USE_DND : true,
        // 제목 앞에 checkbox 사용여부
        USE_CHKBOX : true,
        // 폴더, 파일등의 아이콘 사용여부
        USE_ICON : true,
        // ROOT_NODE_NM, ROOT_NODE_VAL의 값이 설정된 root node 사용여부
        USE_ROOT_NODE : true,
        // ROOT node 클릭시 view 페이지 열기 여부
        USE_ROOT_VIEW : false,
        // 폴더 node인 경우 마우스 클릭시 상세 URL(VIEW_URL) 호출여부 
        FOLDER_OPEN : true,
        // 상세 화면 호출시 결과를 표시할 div 태그 id
        CONT_PAN_ID : "treeCont",
        // node를 선택하는 방식 선택 1:하나 선택, 2:복수 선택, 
        // 3:계층형 선택(부모 선택시 자식 모두 선택, 자식 선택시 부모 자동 선택) 
        SELECT_MODE : 1,
        // 추가 파라미터가 필요한 경우에 사용자 정의 추가
        BASE_PARAM_NM : "",
        BASE_PARAM_VAL : "",
        // USE_ROOT_NODE가 true 인 경우 node를 생성할 key, title 값
        ROOT_NODE_NM : "${template.tableComment} 목록",
        ROOT_NODE_VAL : OpConfig.defaultCode.highCommonCd,
        // 폴더를 열어 자식node 목록을 가져올 때 사용 될 쿼리조건 key와 value 
        P_NODE_NM : "q_highCode",
        P_NODE_VAL : OpConfig.defaultCode.highCommonCd,
        // 상세화면 호출시 사용될 해당 node의 키
        NODE_NM : "q_cdId",
        // 이동시 현재 일련번호 값을 전달할 파라미터 키명칭
        ORDER_NM : "q_sortSn",
        // 목록 json 데이터를 가져오기 위한 URL
        SRC_URL : "ND_select${template.className}TreeList.do",
        // 상세화면 URL
        VIEW_URL : "INC_select${template.className}.do",
        // DnD 옵션 활성화로 node를 이동할 경우 변경정보를 반영할 URL
        MOVE_URL : "ND_update${template.className}SortOrder.do"
    }

    // TREE 함수 목록
    var methodList = function() {
        /*
         * tree 를 새로고침 한다.
         */
        reload : function()
        /*
         * 선택된 node의 경로를 반환한다. nodeKey가 지정된 경우 지정된 node를 대상으로 한다. 
         * delimiter 를 지정할 수 있으며 미지정시 기본 delimiter는 ' &gt; ' 이다.
         */
        getNodePath : function(delimiter, nodeKey)
        /*
         * 선택된 node의 title을 변경한다. nodeKey가 지정된 경우 지정된 node를 대상으로 한다.
         */
        setTitle : function(title, nodeKey)
        /*
         * 선택된 node에 useYn 값에 따라서 사용/미사용 글자색을 지정한다.
         * nodeKey가 지정된 경우 지정된 node를 대상으로 한다.
         */
        setUseYn : function(useYn, nodeKey)
        /*
         * 선택된 node가 폴더(자식이 있는 경우)인지 여부를 true/false로 반환한다.
         * nodeKey가 지정된 경우 지정된 node를 대상으로 한다.
         */
        isFolder : function(nodeKey)
        /*
         * 선택된 node에 자식 node를 추가한다. 추가할 node는 아래와 같아야 한다. 
         * {"key" : "키", "title": "제목", "folder" : true, "lazy": true, "customKey1": "customVal1", "customKey2": "customVal2"}
         * 
         * 참고 : lazy 는 ajax data와 같이 현재는 데이터가 없는 경우에 설정하며 openworks에서는 기본형이다.
         */
        addChildren : function(childNode, nodeKey)
        /*
         * 선택된 node를 삭제한다. nodeKey가 지정된 경우 지정된 node를 대상으로 한다.
         */
        removeNode : function(nodeKey)
        /*
         * 현재 활성화(선택)된 node를 반환
         */
        activeNode : function()
        /*
         * 키에 해당하는 node를 반환한다.
         */
        nodeByKey : function(nodeKey)
        /*
         * ROOT 부터 해당키의 node까지 모두를 펼친다.
         */
        expandKey : function(nodeKey)
        /*
         * 모든 node를 전부 펼친다
         */
        expandAll : function()
        /*
         * 모든 node를 전부 접는다.
         */
        collapseAll : function()
        /*
         * 현재 선택된 node의 자식 node를 전부 펼친다.
         */
        expandSibling : function()
        /*
         * 전달된 node의 자식 node를 전부 펼친다.
         */
        expandChildNode : function(node)
        /*
         * 전달된 node의 자식 node를 전부 접는다.
         */
        collapseChildNode : function(node)
        /*
         * 전달된 node의 부모노드를 전부 펼친다.
         */
        expandParentNode : function(node)
    };

    /*
     * 자식 node 추가 셈플 "1" 키에 해당하는 node의 자식으로 추가한다.
     */
    var addChild = function() {
        Optree.addChildren({
            "key" : "100",
            "title" : "제목",
            "lazy" : false,
            "customKey1" : "customVal1",
            "customKey2" : "customVal2"
        }, "1");
    };

    /*
     * 선택된 node의 문자열 경로를 반환한다.
     * delimiter : 기본값 &gt;
     * nodeKey : 기본값 null. 특정키에 해당하는 경로명 반환 (반드시 "" 문자열을 사용)
     */
    var getNodePath = function() {
        alert(Optree.getNodePath());
    };

    /*
     * 선택된 node를 삭제한다. 셈플 "0" 키에 해당하는 node를 삭제한다.
     * nodeKey : 기본값 null. 특정키에 node를 삭제 (반드시 "" 문자열을 사용)
     */
    var removeNode = function() {
        Optree.removeNode("0");
    };
    --%>
    //]]&gt;
</script>
</head>
<body>
]]>
                    </start>
                    <end>
<![CDATA[
</body>
</html>
]]>
                    </end>
                </declaration>
                <body>
<![CDATA[
    <div class="row">
        <div class="col-xs-3">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h6 class="panel-title">
                        <i class="icon-list2"></i> ${template.tableComment}목록
                    </h6>
                    <div class="panel-icons-group">
                        <a href="#" class="btn btn-link btn-icon" onclick="reload();"><i class="icon-spinner7"></i></a>
                        <a href="#" class="btn btn-link btn-icon" onclick="expandAll();"><i class="icon-plus-circle"></i></a>
                        <a href="#" class="btn btn-link btn-icon" onclick="collapseAll();"><i class="icon-minus-circle"></i></a>
                    </div>
                </div>
                <div class="panel-body">
                    <div id="TreePan"></div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 btn-group">
                    <div class="pull-right">
                        <a href="PD_select${template.className}List.do" class="btn btn-info" id="addModal">${template.tableComment}추가</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xs-9">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h6 class="panel-title">
                        <i class="icon-libreoffice"></i> ${template.tableComment}상세
                    </h6>
                </div>
                <div id="${template.className}_VIEW" class="panel-body"></div>
            </div>
        </div>
    </div>
    <div id="dummy" style="display: none;">
        <div class="callout callout-danger fade in">
            <h5>항목이 선택되지 않았습니다.</h5>
            <p>좌측 ${template.tableComment} 목록에서 선택하시거나 추가 버튼을 클릭하세요.</p>
        </div>
    </div>
]]>
                </body>

            </treeMain>
            <treeAdd>
                <declaration>
                    <start>
<![CDATA[
<%@ page contentType="text/html;charset=UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://www.openworks.kr/jsp/jstl" prefix="op"%>

<!DOCTYPE html>
<html lang="ko">
<head>
<title>${template.tableComment} 관리</title>

<op:jsTag type="intra" items="tree, opform" />

<script type="text/javascript">
    //&lt;![CDATA[

    var insertCnt = 0;
    var contPadId = "${template.className}_ADD_VIEW";
    var Optree;
    // 예제 옵션 위의 주석을 참조하여 필요한 설정을 하도록 한다. 
    var options = {
        // ROOT 노드 클릭시 상세화면 표시여부
        USE_ROOT_VIEW : true,
        // 폴더인 경우 view를 열지 여부 (기본값 true)
        FOLDER_OPEN : true,
        // view가 로드될 패널
        CONT_PAN_ID : contPadId,
        // 트리 데이터 url
        SRC_URL : "ND_select${template.className}TreeList.do",
        // view url
        VIEW_URL : "INC_insert${template.className}Form.do",
        //VIEW_URL : "INC_select${template.className}.do",
        //VIEW_URL : "INC_select${template.className}.do",
        // node move시 호출될 url
        MOVE_URL : "ND_update${template.className}SortOrder.do",
        // 기본 표시 명칭
        ROOT_NODE_NM : "${template.tableComment}목록",
        // 기본 표시 데이터 키값 (dummy)
        ROOT_NODE_VAL : OpConfig.defaultCode.highCommonCd,
        // 추가 파라미터가 필요한 경우에 사용자 정의 추가
        // 부모 노드의 파라미터 명칭
        P_NODE_NM : "q_${template.upperPkNm}",
        // 현재 노드의 파라미터 명칭
        NODE_NM : "q_${template.pkNm}",
        // 이동시 현재 일련번호 값을 전달할 파라미터 키명칭
        ORDER_NM : "q_sortSn"
    };

    /* 공통 초기화 기능 */
    $(document).ready(function() {
        // 트리 생성
        Optree = $("#TreePan").optree(options);
        // 초기 상세화면 영역 안내 메시지 표시
        initView(contPadId);
    });

    /**
     * 상세화면 초기화
     */
    var initView = function(id) {
        $("#" + id).html($("#dummy").html());
    };

    /* modal창 닫기 */
    var opCloseWin = function() {
        // 등록한 내역이 있을경우에만 트리 초기화
        if (insertCnt > 0) {
            parent.Optree.reload();
        }
        parent.$.fancybox.close();
    }

    //]]&gt;
</script>
</head>
<body>
]]>
                    </start>
                    <end>
<![CDATA[
</body>
</html>
]]>
                    </end>
                </declaration>
                <body>
<![CDATA[
    <div class="row">
        <div class="col-xs-3">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h6 class="panel-title">
                        <i class="icon-list2"></i> ${template.tableComment}목록
                    </h6>
                    <div class="panel-icons-group">
                        <a href="#" class="btn btn-link btn-icon" onclick="reload();"><i class="icon-spinner7"></i></a>
                        <a href="#" class="btn btn-link btn-icon" onclick="expandAll();"><i class="icon-plus-circle"></i></a>
                        <a href="#" class="btn btn-link btn-icon" onclick="collapseAll();"><i class="icon-minus-circle"></i></a>
                    </div>
                </div>
                <div class="panel-body">
                    <div id="TreePan"></div>
                </div>
            </div>
        </div>

        <div class="col-xs-9">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h6 class="panel-title">
                        <i class="icon-libreoffice"></i> ${template.tableComment}상세
                    </h6>
                </div>
                <div id="${template.className}_ADD_VIEW" class="panel-body"></div>
            </div>
        </div>
    </div>
    <div id="dummy" style="display: none;">
        <div class="callout callout-danger fade in">
            <h5>항목이 선택되지 않았습니다.</h5>
            <p>좌측 ${template.tableComment} 목록에서 선택하세요.</p>
        </div>
    </div>
]]>
                </body>

            </treeAdd>
        </jsp>

    </template-config>
<typeAliases></typeAliases>
</configuration>